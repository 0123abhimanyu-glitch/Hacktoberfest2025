name: ‚úÖ Auto-Merge Valuable PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    # Check for mergeable PRs every 2 hours
    - cron: '0 */2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-merge-valuable:
    runs-on: ubuntu-latest

    steps:
      - name: üîÑ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç Find all open PRs with mergeableState
        id: find-prs
        run: |
          # 1) Fetch all open PRs, including mergeableState and file list
          all_prs=$(gh pr list \
            --state open \
            --json number,title,author,mergeableState,files \
            --limit 3000)

          # 2) Save that JSON into a step output as a multiline string
          echo "all_prs<<EOF" >> $GITHUB_OUTPUT
          echo "$all_prs"        >> $GITHUB_OUTPUT
          echo "EOF"             >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚úÖ Auto-merge non-conflicting PRs
        run: |
          # ‚îÄ‚îÄ STEP A: Dump the JSON blob to a file for safe parsing ‚îÄ‚îÄ
          echo "${{ steps.find-prs.outputs.all_prs }}" > all_prs.json

          # ‚îÄ‚îÄ STEP B: Loop over each PR entry (base64-encoded) ‚îÄ‚îÄ
          jq -r '.[] | @base64' all_prs.json | while IFS= read -r pr_data; do
            if [ -z "$pr_data" ]; then
              continue
            fi

            pr=$(echo "$pr_data" | base64 -d)
            pr_number=$(echo "$pr" | jq -r '.number')
            pr_title=$(echo "$pr" | jq -r '.title')
            pr_author=$(echo "$pr" | jq -r '.author.login')
            pr_mergeableState=$(echo "$pr" | jq -r '.mergeableState')

            # 1) Skip any PR that only touches contributors/contributorsList.js
            files_changed=$(echo "$pr" | jq -r '.files[].path // empty')
            if [ -z "$files_changed" ]; then
              # No files changed? Strange, but skip.
              continue
            fi

            contributors_only=true
            while IFS= read -r file; do
              if [ -n "$file" ] && [ "$file" != "contributors/contributorsList.js" ]; then
                contributors_only=false
                break
              fi
            done <<< "$files_changed"

            if [ "$contributors_only" = "true" ]; then
              # There is only contributorsList.js in the changes ‚Üí skip
              continue
            fi

            # 2) Only act on PRs that GitHub marks as ‚ÄúMERGEABLE‚Äù
            if [ "$pr_mergeableState" != "MERGEABLE" ]; then
              # Either there‚Äôs a conflict or GitHub hasn‚Äôt computed mergeability ‚Üí skip
              echo "‚ö†Ô∏è Skipping PR #$pr_number (state: $pr_mergeableState)"
              continue
            fi

            echo "üîÑ Processing PR #$pr_number by @$pr_author ‚Äî \"$pr_title\""
            echo "    ‚Ä¢ mergeableState = $pr_mergeableState"

            # 3) Check if the label ‚Äúvaluable-contribution‚Äù already exists on this PR
            has_label=$(gh pr view "$pr_number" --json labels \
              | jq -r '.labels[].name' \
              | grep -x "valuable-contribution" || echo "")

            if [ -z "$has_label" ]; then
              # Add the label, since it‚Äôs MERGEABLE and unlabeled
              echo "    ‚Ä¢ Adding label ‚Äúvaluable-contribution‚Äù"
              gh pr edit "$pr_number" --add-label "valuable-contribution" || true
            fi

            # 4) Merge the PR and delete its branch
            echo "    ‚Ä¢ Attempting to merge PR #$pr_number"
            if gh pr merge "$pr_number" --merge --delete-branch; then
              echo "‚úÖ Successfully merged PR #$pr_number"
              gh pr comment "$pr_number" \
                --body "üöÄ **Automatically merged!** Thank you @$pr_author for your contribution. üéâ #AutoMerge" \
                || true
            else
              echo "‚ùå Failed to merge PR #$pr_number"
            fi

            # Rate-limit pause to avoid hitting GitHub API limits
            sleep 2
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Summary
        run: |
          echo "ü§ñ Auto-merge workflow completed!"
          contributor_count=$(grep -c "id:" contributors/contributorsList.js || echo 0)
          echo "üìä Total Contributors (lines in contributorsList.js): $contributor_count"
          echo "‚úÖ Attempted to merge all non-conflicting PRs"
