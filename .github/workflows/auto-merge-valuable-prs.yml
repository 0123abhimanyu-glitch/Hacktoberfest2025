name: ‚úÖ Auto-Merge Valuable PRs

on:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    # Check for mergeable PRs every 2 hours
    - cron: '0 */2 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-merge-valuable:
    runs-on: ubuntu-latest
    if: github.repository == 'fineanmol/Hacktoberfest2024'
    
    steps:
      - name: üîÑ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç Find mergeable valuable PRs
        id: find-prs
        run: |
          # Get PRs labeled "valuable-contribution" and check mergeable status
          valuable_prs=$(gh pr list \
            --state open \
            --label "valuable-contribution" \
            --json number,title,author,mergeable \
            --limit 50)

          # Also fetch all open PRs (to inspect their file changes)
          all_prs=$(gh pr list \
            --state open \
            --json number,title,author,mergeable,files \
            --limit 50)

          # Save the JSON blobs into step outputs as multiline strings
          echo "valuable_prs<<EOF" >> $GITHUB_OUTPUT
          echo "$valuable_prs"       >> $GITHUB_OUTPUT
          echo "EOF"                 >> $GITHUB_OUTPUT

          echo "all_prs<<EOF"        >> $GITHUB_OUTPUT
          echo "$all_prs"           >> $GITHUB_OUTPUT
          echo "EOF"                 >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚úÖ Auto-merge valuable PRs
        run: |
          # ‚îÄ‚îÄ FIXED LINES BELOW ‚îÄ‚îÄ
          # Write the multiline JSON into temporary files so jq can safely parse them
          echo "${{ steps.find-prs.outputs.valuable_prs }}" > valuable_prs.json
          echo "${{ steps.find-prs.outputs.all_prs }}"      > all_prs.json

          # Process ‚Äúvaluable-contribution‚Äù PRs first
          jq -r '.[] | @base64' valuable_prs.json | while IFS= read -r pr_data; do
            if [ -n "$pr_data" ]; then
              pr=$(echo "$pr_data" | base64 -d)
              pr_number=$(echo "$pr" | jq -r '.number')
              pr_title=$(echo "$pr" | jq -r '.title')
              pr_author=$(echo "$pr" | jq -r '.author.login')
              pr_mergeable=$(echo "$pr" | jq -r '.mergeable')

              echo "üîÑ Processing valuable PR #$pr_number by @$pr_author"
              echo "Title: $pr_title"
              echo "Mergeable: $pr_mergeable"

              if [ "$pr_mergeable" = "MERGEABLE" ] || [ "$pr_mergeable" = "true" ]; then
                echo "‚úÖ Auto-merging valuable PR #$pr_number"
                if gh pr merge $pr_number --merge --delete-branch; then
                  echo "‚úÖ Successfully merged PR #$pr_number"
                  gh pr comment $pr_number \
                    --body "üöÄ **Automatically Merged!** Thank you @$pr_author for your valuable contribution to Hacktoberfest 2024! Your code has been successfully merged into the main branch. üéâ #Hacktoberfest #OpenSource" \
                    || true
                else
                  echo "‚ùå Failed to merge PR #$pr_number"
                fi
              else
                echo "‚ö†Ô∏è PR #$pr_number not mergeable yet"
              fi

              sleep 2  # rate-limit
            fi
          done

          # Next: process any other open PRs that might deserve ‚Äúvaluable-contribution‚Äù
          jq -r '.[] | @base64' all_prs.json | while IFS= read -r pr_data; do
            if [ -n "$pr_data" ]; then
              pr=$(echo "$pr_data" | base64 -d)
              pr_number=$(echo "$pr" | jq -r '.number')
              pr_title=$(echo "$pr" | jq -r '.title')
              pr_author=$(echo "$pr" | jq -r '.author.login')
              pr_mergeable=$(echo "$pr" | jq -r '.mergeable')

              # List all files changed in this PR
              files_changed=$(echo "$pr" | jq -r '.files[].path // empty')

              # If there are no changed files, skip
              if [ -z "$files_changed" ]; then
                continue
              fi

              # Detect if it‚Äôs ‚Äúcontributors-only‚Äù
              contributors_only=true
              while IFS= read -r file; do
                if [ -n "$file" ] && [ "$file" != "contributors/contributorsList.js" ]; then
                  contributors_only=false
                  break
                fi
              done <<< "$files_changed"

              # Skip any PRs that only touch contributorsList.js
              if [ "$contributors_only" = "true" ]; then
                continue
              fi

              echo "üîÑ Processing unlabeled PR #$pr_number by @$pr_author"

              if [ "$pr_mergeable" = "MERGEABLE" ] || [ "$pr_mergeable" = "true" ]; then
                echo "‚úÖ Auto-merging valuable PR #$pr_number"
                # First, tag it ‚Äúvaluable-contribution‚Äù
                gh pr edit $pr_number --add-label "valuable-contribution" || true

                if gh pr merge $pr_number --merge --delete-branch; then
                  echo "‚úÖ Successfully merged PR #$pr_number"
                  gh pr comment $pr_number \
                    --body "üöÄ **Automatically Merged!** Thank you @$pr_author for your valuable contribution to Hacktoberfest 2024! Your code has been successfully merged. üéâ #Hacktoberfest #OpenSource" \
                    || true
                else
                  echo "‚ùå Failed to merge PR #$pr_number"
                fi
              fi

              sleep 2  # rate-limit
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üìä Summary
        run: |
          echo "ü§ñ Auto-merge workflow completed!"
          contributor_count=$(grep -c "id:" contributors/contributorsList.js || echo 0)
          echo "üìä Total Contributors: $contributor_count"
          echo "‚úÖ Processed valuable PRs for auto-merging"
